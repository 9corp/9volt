// This file was generated by counterfeiter
package logfakes

import (
	"sync"

	"github.com/Sirupsen/logrus"
)

type FakeFieldLogger struct {
	WithFieldStub        func(key string, value interface{}) *logrus.Entry
	withFieldMutex       sync.RWMutex
	withFieldArgsForCall []struct {
		key   string
		value interface{}
	}
	withFieldReturns struct {
		result1 *logrus.Entry
	}
	withFieldReturnsOnCall map[int]struct {
		result1 *logrus.Entry
	}
	WithFieldsStub        func(fields logrus.Fields) *logrus.Entry
	withFieldsMutex       sync.RWMutex
	withFieldsArgsForCall []struct {
		fields logrus.Fields
	}
	withFieldsReturns struct {
		result1 *logrus.Entry
	}
	withFieldsReturnsOnCall map[int]struct {
		result1 *logrus.Entry
	}
	WithErrorStub        func(err error) *logrus.Entry
	withErrorMutex       sync.RWMutex
	withErrorArgsForCall []struct {
		err error
	}
	withErrorReturns struct {
		result1 *logrus.Entry
	}
	withErrorReturnsOnCall map[int]struct {
		result1 *logrus.Entry
	}
	DebugfStub        func(format string, args ...interface{})
	debugfMutex       sync.RWMutex
	debugfArgsForCall []struct {
		format string
		args   []interface{}
	}
	InfofStub        func(format string, args ...interface{})
	infofMutex       sync.RWMutex
	infofArgsForCall []struct {
		format string
		args   []interface{}
	}
	PrintfStub        func(format string, args ...interface{})
	printfMutex       sync.RWMutex
	printfArgsForCall []struct {
		format string
		args   []interface{}
	}
	WarnfStub        func(format string, args ...interface{})
	warnfMutex       sync.RWMutex
	warnfArgsForCall []struct {
		format string
		args   []interface{}
	}
	WarningfStub        func(format string, args ...interface{})
	warningfMutex       sync.RWMutex
	warningfArgsForCall []struct {
		format string
		args   []interface{}
	}
	ErrorfStub        func(format string, args ...interface{})
	errorfMutex       sync.RWMutex
	errorfArgsForCall []struct {
		format string
		args   []interface{}
	}
	FatalfStub        func(format string, args ...interface{})
	fatalfMutex       sync.RWMutex
	fatalfArgsForCall []struct {
		format string
		args   []interface{}
	}
	PanicfStub        func(format string, args ...interface{})
	panicfMutex       sync.RWMutex
	panicfArgsForCall []struct {
		format string
		args   []interface{}
	}
	DebugStub        func(args ...interface{})
	debugMutex       sync.RWMutex
	debugArgsForCall []struct {
		args []interface{}
	}
	InfoStub        func(args ...interface{})
	infoMutex       sync.RWMutex
	infoArgsForCall []struct {
		args []interface{}
	}
	PrintStub        func(args ...interface{})
	printMutex       sync.RWMutex
	printArgsForCall []struct {
		args []interface{}
	}
	WarnStub        func(args ...interface{})
	warnMutex       sync.RWMutex
	warnArgsForCall []struct {
		args []interface{}
	}
	WarningStub        func(args ...interface{})
	warningMutex       sync.RWMutex
	warningArgsForCall []struct {
		args []interface{}
	}
	ErrorStub        func(args ...interface{})
	errorMutex       sync.RWMutex
	errorArgsForCall []struct {
		args []interface{}
	}
	FatalStub        func(args ...interface{})
	fatalMutex       sync.RWMutex
	fatalArgsForCall []struct {
		args []interface{}
	}
	PanicStub        func(args ...interface{})
	panicMutex       sync.RWMutex
	panicArgsForCall []struct {
		args []interface{}
	}
	DebuglnStub        func(args ...interface{})
	debuglnMutex       sync.RWMutex
	debuglnArgsForCall []struct {
		args []interface{}
	}
	InfolnStub        func(args ...interface{})
	infolnMutex       sync.RWMutex
	infolnArgsForCall []struct {
		args []interface{}
	}
	PrintlnStub        func(args ...interface{})
	printlnMutex       sync.RWMutex
	printlnArgsForCall []struct {
		args []interface{}
	}
	WarnlnStub        func(args ...interface{})
	warnlnMutex       sync.RWMutex
	warnlnArgsForCall []struct {
		args []interface{}
	}
	WarninglnStub        func(args ...interface{})
	warninglnMutex       sync.RWMutex
	warninglnArgsForCall []struct {
		args []interface{}
	}
	ErrorlnStub        func(args ...interface{})
	errorlnMutex       sync.RWMutex
	errorlnArgsForCall []struct {
		args []interface{}
	}
	FatallnStub        func(args ...interface{})
	fatallnMutex       sync.RWMutex
	fatallnArgsForCall []struct {
		args []interface{}
	}
	PaniclnStub        func(args ...interface{})
	paniclnMutex       sync.RWMutex
	paniclnArgsForCall []struct {
		args []interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFieldLogger) WithField(key string, value interface{}) *logrus.Entry {
	fake.withFieldMutex.Lock()
	ret, specificReturn := fake.withFieldReturnsOnCall[len(fake.withFieldArgsForCall)]
	fake.withFieldArgsForCall = append(fake.withFieldArgsForCall, struct {
		key   string
		value interface{}
	}{key, value})
	fake.recordInvocation("WithField", []interface{}{key, value})
	fake.withFieldMutex.Unlock()
	if fake.WithFieldStub != nil {
		return fake.WithFieldStub(key, value)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.withFieldReturns.result1
}

func (fake *FakeFieldLogger) WithFieldCallCount() int {
	fake.withFieldMutex.RLock()
	defer fake.withFieldMutex.RUnlock()
	return len(fake.withFieldArgsForCall)
}

func (fake *FakeFieldLogger) WithFieldArgsForCall(i int) (string, interface{}) {
	fake.withFieldMutex.RLock()
	defer fake.withFieldMutex.RUnlock()
	return fake.withFieldArgsForCall[i].key, fake.withFieldArgsForCall[i].value
}

func (fake *FakeFieldLogger) WithFieldReturns(result1 *logrus.Entry) {
	fake.WithFieldStub = nil
	fake.withFieldReturns = struct {
		result1 *logrus.Entry
	}{result1}
}

func (fake *FakeFieldLogger) WithFieldReturnsOnCall(i int, result1 *logrus.Entry) {
	fake.WithFieldStub = nil
	if fake.withFieldReturnsOnCall == nil {
		fake.withFieldReturnsOnCall = make(map[int]struct {
			result1 *logrus.Entry
		})
	}
	fake.withFieldReturnsOnCall[i] = struct {
		result1 *logrus.Entry
	}{result1}
}

func (fake *FakeFieldLogger) WithFields(fields logrus.Fields) *logrus.Entry {
	fake.withFieldsMutex.Lock()
	ret, specificReturn := fake.withFieldsReturnsOnCall[len(fake.withFieldsArgsForCall)]
	fake.withFieldsArgsForCall = append(fake.withFieldsArgsForCall, struct {
		fields logrus.Fields
	}{fields})
	fake.recordInvocation("WithFields", []interface{}{fields})
	fake.withFieldsMutex.Unlock()
	if fake.WithFieldsStub != nil {
		return fake.WithFieldsStub(fields)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.withFieldsReturns.result1
}

func (fake *FakeFieldLogger) WithFieldsCallCount() int {
	fake.withFieldsMutex.RLock()
	defer fake.withFieldsMutex.RUnlock()
	return len(fake.withFieldsArgsForCall)
}

func (fake *FakeFieldLogger) WithFieldsArgsForCall(i int) logrus.Fields {
	fake.withFieldsMutex.RLock()
	defer fake.withFieldsMutex.RUnlock()
	return fake.withFieldsArgsForCall[i].fields
}

func (fake *FakeFieldLogger) WithFieldsReturns(result1 *logrus.Entry) {
	fake.WithFieldsStub = nil
	fake.withFieldsReturns = struct {
		result1 *logrus.Entry
	}{result1}
}

func (fake *FakeFieldLogger) WithFieldsReturnsOnCall(i int, result1 *logrus.Entry) {
	fake.WithFieldsStub = nil
	if fake.withFieldsReturnsOnCall == nil {
		fake.withFieldsReturnsOnCall = make(map[int]struct {
			result1 *logrus.Entry
		})
	}
	fake.withFieldsReturnsOnCall[i] = struct {
		result1 *logrus.Entry
	}{result1}
}

func (fake *FakeFieldLogger) WithError(err error) *logrus.Entry {
	fake.withErrorMutex.Lock()
	ret, specificReturn := fake.withErrorReturnsOnCall[len(fake.withErrorArgsForCall)]
	fake.withErrorArgsForCall = append(fake.withErrorArgsForCall, struct {
		err error
	}{err})
	fake.recordInvocation("WithError", []interface{}{err})
	fake.withErrorMutex.Unlock()
	if fake.WithErrorStub != nil {
		return fake.WithErrorStub(err)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.withErrorReturns.result1
}

func (fake *FakeFieldLogger) WithErrorCallCount() int {
	fake.withErrorMutex.RLock()
	defer fake.withErrorMutex.RUnlock()
	return len(fake.withErrorArgsForCall)
}

func (fake *FakeFieldLogger) WithErrorArgsForCall(i int) error {
	fake.withErrorMutex.RLock()
	defer fake.withErrorMutex.RUnlock()
	return fake.withErrorArgsForCall[i].err
}

func (fake *FakeFieldLogger) WithErrorReturns(result1 *logrus.Entry) {
	fake.WithErrorStub = nil
	fake.withErrorReturns = struct {
		result1 *logrus.Entry
	}{result1}
}

func (fake *FakeFieldLogger) WithErrorReturnsOnCall(i int, result1 *logrus.Entry) {
	fake.WithErrorStub = nil
	if fake.withErrorReturnsOnCall == nil {
		fake.withErrorReturnsOnCall = make(map[int]struct {
			result1 *logrus.Entry
		})
	}
	fake.withErrorReturnsOnCall[i] = struct {
		result1 *logrus.Entry
	}{result1}
}

func (fake *FakeFieldLogger) Debugf(format string, args ...interface{}) {
	fake.debugfMutex.Lock()
	fake.debugfArgsForCall = append(fake.debugfArgsForCall, struct {
		format string
		args   []interface{}
	}{format, args})
	fake.recordInvocation("Debugf", []interface{}{format, args})
	fake.debugfMutex.Unlock()
	if fake.DebugfStub != nil {
		fake.DebugfStub(format, args...)
	}
}

func (fake *FakeFieldLogger) DebugfCallCount() int {
	fake.debugfMutex.RLock()
	defer fake.debugfMutex.RUnlock()
	return len(fake.debugfArgsForCall)
}

func (fake *FakeFieldLogger) DebugfArgsForCall(i int) (string, []interface{}) {
	fake.debugfMutex.RLock()
	defer fake.debugfMutex.RUnlock()
	return fake.debugfArgsForCall[i].format, fake.debugfArgsForCall[i].args
}

func (fake *FakeFieldLogger) Infof(format string, args ...interface{}) {
	fake.infofMutex.Lock()
	fake.infofArgsForCall = append(fake.infofArgsForCall, struct {
		format string
		args   []interface{}
	}{format, args})
	fake.recordInvocation("Infof", []interface{}{format, args})
	fake.infofMutex.Unlock()
	if fake.InfofStub != nil {
		fake.InfofStub(format, args...)
	}
}

func (fake *FakeFieldLogger) InfofCallCount() int {
	fake.infofMutex.RLock()
	defer fake.infofMutex.RUnlock()
	return len(fake.infofArgsForCall)
}

func (fake *FakeFieldLogger) InfofArgsForCall(i int) (string, []interface{}) {
	fake.infofMutex.RLock()
	defer fake.infofMutex.RUnlock()
	return fake.infofArgsForCall[i].format, fake.infofArgsForCall[i].args
}

func (fake *FakeFieldLogger) Printf(format string, args ...interface{}) {
	fake.printfMutex.Lock()
	fake.printfArgsForCall = append(fake.printfArgsForCall, struct {
		format string
		args   []interface{}
	}{format, args})
	fake.recordInvocation("Printf", []interface{}{format, args})
	fake.printfMutex.Unlock()
	if fake.PrintfStub != nil {
		fake.PrintfStub(format, args...)
	}
}

func (fake *FakeFieldLogger) PrintfCallCount() int {
	fake.printfMutex.RLock()
	defer fake.printfMutex.RUnlock()
	return len(fake.printfArgsForCall)
}

func (fake *FakeFieldLogger) PrintfArgsForCall(i int) (string, []interface{}) {
	fake.printfMutex.RLock()
	defer fake.printfMutex.RUnlock()
	return fake.printfArgsForCall[i].format, fake.printfArgsForCall[i].args
}

func (fake *FakeFieldLogger) Warnf(format string, args ...interface{}) {
	fake.warnfMutex.Lock()
	fake.warnfArgsForCall = append(fake.warnfArgsForCall, struct {
		format string
		args   []interface{}
	}{format, args})
	fake.recordInvocation("Warnf", []interface{}{format, args})
	fake.warnfMutex.Unlock()
	if fake.WarnfStub != nil {
		fake.WarnfStub(format, args...)
	}
}

func (fake *FakeFieldLogger) WarnfCallCount() int {
	fake.warnfMutex.RLock()
	defer fake.warnfMutex.RUnlock()
	return len(fake.warnfArgsForCall)
}

func (fake *FakeFieldLogger) WarnfArgsForCall(i int) (string, []interface{}) {
	fake.warnfMutex.RLock()
	defer fake.warnfMutex.RUnlock()
	return fake.warnfArgsForCall[i].format, fake.warnfArgsForCall[i].args
}

func (fake *FakeFieldLogger) Warningf(format string, args ...interface{}) {
	fake.warningfMutex.Lock()
	fake.warningfArgsForCall = append(fake.warningfArgsForCall, struct {
		format string
		args   []interface{}
	}{format, args})
	fake.recordInvocation("Warningf", []interface{}{format, args})
	fake.warningfMutex.Unlock()
	if fake.WarningfStub != nil {
		fake.WarningfStub(format, args...)
	}
}

func (fake *FakeFieldLogger) WarningfCallCount() int {
	fake.warningfMutex.RLock()
	defer fake.warningfMutex.RUnlock()
	return len(fake.warningfArgsForCall)
}

func (fake *FakeFieldLogger) WarningfArgsForCall(i int) (string, []interface{}) {
	fake.warningfMutex.RLock()
	defer fake.warningfMutex.RUnlock()
	return fake.warningfArgsForCall[i].format, fake.warningfArgsForCall[i].args
}

func (fake *FakeFieldLogger) Errorf(format string, args ...interface{}) {
	fake.errorfMutex.Lock()
	fake.errorfArgsForCall = append(fake.errorfArgsForCall, struct {
		format string
		args   []interface{}
	}{format, args})
	fake.recordInvocation("Errorf", []interface{}{format, args})
	fake.errorfMutex.Unlock()
	if fake.ErrorfStub != nil {
		fake.ErrorfStub(format, args...)
	}
}

func (fake *FakeFieldLogger) ErrorfCallCount() int {
	fake.errorfMutex.RLock()
	defer fake.errorfMutex.RUnlock()
	return len(fake.errorfArgsForCall)
}

func (fake *FakeFieldLogger) ErrorfArgsForCall(i int) (string, []interface{}) {
	fake.errorfMutex.RLock()
	defer fake.errorfMutex.RUnlock()
	return fake.errorfArgsForCall[i].format, fake.errorfArgsForCall[i].args
}

func (fake *FakeFieldLogger) Fatalf(format string, args ...interface{}) {
	fake.fatalfMutex.Lock()
	fake.fatalfArgsForCall = append(fake.fatalfArgsForCall, struct {
		format string
		args   []interface{}
	}{format, args})
	fake.recordInvocation("Fatalf", []interface{}{format, args})
	fake.fatalfMutex.Unlock()
	if fake.FatalfStub != nil {
		fake.FatalfStub(format, args...)
	}
}

func (fake *FakeFieldLogger) FatalfCallCount() int {
	fake.fatalfMutex.RLock()
	defer fake.fatalfMutex.RUnlock()
	return len(fake.fatalfArgsForCall)
}

func (fake *FakeFieldLogger) FatalfArgsForCall(i int) (string, []interface{}) {
	fake.fatalfMutex.RLock()
	defer fake.fatalfMutex.RUnlock()
	return fake.fatalfArgsForCall[i].format, fake.fatalfArgsForCall[i].args
}

func (fake *FakeFieldLogger) Panicf(format string, args ...interface{}) {
	fake.panicfMutex.Lock()
	fake.panicfArgsForCall = append(fake.panicfArgsForCall, struct {
		format string
		args   []interface{}
	}{format, args})
	fake.recordInvocation("Panicf", []interface{}{format, args})
	fake.panicfMutex.Unlock()
	if fake.PanicfStub != nil {
		fake.PanicfStub(format, args...)
	}
}

func (fake *FakeFieldLogger) PanicfCallCount() int {
	fake.panicfMutex.RLock()
	defer fake.panicfMutex.RUnlock()
	return len(fake.panicfArgsForCall)
}

func (fake *FakeFieldLogger) PanicfArgsForCall(i int) (string, []interface{}) {
	fake.panicfMutex.RLock()
	defer fake.panicfMutex.RUnlock()
	return fake.panicfArgsForCall[i].format, fake.panicfArgsForCall[i].args
}

func (fake *FakeFieldLogger) Debug(args ...interface{}) {
	fake.debugMutex.Lock()
	fake.debugArgsForCall = append(fake.debugArgsForCall, struct {
		args []interface{}
	}{args})
	fake.recordInvocation("Debug", []interface{}{args})
	fake.debugMutex.Unlock()
	if fake.DebugStub != nil {
		fake.DebugStub(args...)
	}
}

func (fake *FakeFieldLogger) DebugCallCount() int {
	fake.debugMutex.RLock()
	defer fake.debugMutex.RUnlock()
	return len(fake.debugArgsForCall)
}

func (fake *FakeFieldLogger) DebugArgsForCall(i int) []interface{} {
	fake.debugMutex.RLock()
	defer fake.debugMutex.RUnlock()
	return fake.debugArgsForCall[i].args
}

func (fake *FakeFieldLogger) Info(args ...interface{}) {
	fake.infoMutex.Lock()
	fake.infoArgsForCall = append(fake.infoArgsForCall, struct {
		args []interface{}
	}{args})
	fake.recordInvocation("Info", []interface{}{args})
	fake.infoMutex.Unlock()
	if fake.InfoStub != nil {
		fake.InfoStub(args...)
	}
}

func (fake *FakeFieldLogger) InfoCallCount() int {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return len(fake.infoArgsForCall)
}

func (fake *FakeFieldLogger) InfoArgsForCall(i int) []interface{} {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return fake.infoArgsForCall[i].args
}

func (fake *FakeFieldLogger) Print(args ...interface{}) {
	fake.printMutex.Lock()
	fake.printArgsForCall = append(fake.printArgsForCall, struct {
		args []interface{}
	}{args})
	fake.recordInvocation("Print", []interface{}{args})
	fake.printMutex.Unlock()
	if fake.PrintStub != nil {
		fake.PrintStub(args...)
	}
}

func (fake *FakeFieldLogger) PrintCallCount() int {
	fake.printMutex.RLock()
	defer fake.printMutex.RUnlock()
	return len(fake.printArgsForCall)
}

func (fake *FakeFieldLogger) PrintArgsForCall(i int) []interface{} {
	fake.printMutex.RLock()
	defer fake.printMutex.RUnlock()
	return fake.printArgsForCall[i].args
}

func (fake *FakeFieldLogger) Warn(args ...interface{}) {
	fake.warnMutex.Lock()
	fake.warnArgsForCall = append(fake.warnArgsForCall, struct {
		args []interface{}
	}{args})
	fake.recordInvocation("Warn", []interface{}{args})
	fake.warnMutex.Unlock()
	if fake.WarnStub != nil {
		fake.WarnStub(args...)
	}
}

func (fake *FakeFieldLogger) WarnCallCount() int {
	fake.warnMutex.RLock()
	defer fake.warnMutex.RUnlock()
	return len(fake.warnArgsForCall)
}

func (fake *FakeFieldLogger) WarnArgsForCall(i int) []interface{} {
	fake.warnMutex.RLock()
	defer fake.warnMutex.RUnlock()
	return fake.warnArgsForCall[i].args
}

func (fake *FakeFieldLogger) Warning(args ...interface{}) {
	fake.warningMutex.Lock()
	fake.warningArgsForCall = append(fake.warningArgsForCall, struct {
		args []interface{}
	}{args})
	fake.recordInvocation("Warning", []interface{}{args})
	fake.warningMutex.Unlock()
	if fake.WarningStub != nil {
		fake.WarningStub(args...)
	}
}

func (fake *FakeFieldLogger) WarningCallCount() int {
	fake.warningMutex.RLock()
	defer fake.warningMutex.RUnlock()
	return len(fake.warningArgsForCall)
}

func (fake *FakeFieldLogger) WarningArgsForCall(i int) []interface{} {
	fake.warningMutex.RLock()
	defer fake.warningMutex.RUnlock()
	return fake.warningArgsForCall[i].args
}

func (fake *FakeFieldLogger) Error(args ...interface{}) {
	fake.errorMutex.Lock()
	fake.errorArgsForCall = append(fake.errorArgsForCall, struct {
		args []interface{}
	}{args})
	fake.recordInvocation("Error", []interface{}{args})
	fake.errorMutex.Unlock()
	if fake.ErrorStub != nil {
		fake.ErrorStub(args...)
	}
}

func (fake *FakeFieldLogger) ErrorCallCount() int {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return len(fake.errorArgsForCall)
}

func (fake *FakeFieldLogger) ErrorArgsForCall(i int) []interface{} {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return fake.errorArgsForCall[i].args
}

func (fake *FakeFieldLogger) Fatal(args ...interface{}) {
	fake.fatalMutex.Lock()
	fake.fatalArgsForCall = append(fake.fatalArgsForCall, struct {
		args []interface{}
	}{args})
	fake.recordInvocation("Fatal", []interface{}{args})
	fake.fatalMutex.Unlock()
	if fake.FatalStub != nil {
		fake.FatalStub(args...)
	}
}

func (fake *FakeFieldLogger) FatalCallCount() int {
	fake.fatalMutex.RLock()
	defer fake.fatalMutex.RUnlock()
	return len(fake.fatalArgsForCall)
}

func (fake *FakeFieldLogger) FatalArgsForCall(i int) []interface{} {
	fake.fatalMutex.RLock()
	defer fake.fatalMutex.RUnlock()
	return fake.fatalArgsForCall[i].args
}

func (fake *FakeFieldLogger) Panic(args ...interface{}) {
	fake.panicMutex.Lock()
	fake.panicArgsForCall = append(fake.panicArgsForCall, struct {
		args []interface{}
	}{args})
	fake.recordInvocation("Panic", []interface{}{args})
	fake.panicMutex.Unlock()
	if fake.PanicStub != nil {
		fake.PanicStub(args...)
	}
}

func (fake *FakeFieldLogger) PanicCallCount() int {
	fake.panicMutex.RLock()
	defer fake.panicMutex.RUnlock()
	return len(fake.panicArgsForCall)
}

func (fake *FakeFieldLogger) PanicArgsForCall(i int) []interface{} {
	fake.panicMutex.RLock()
	defer fake.panicMutex.RUnlock()
	return fake.panicArgsForCall[i].args
}

func (fake *FakeFieldLogger) Debugln(args ...interface{}) {
	fake.debuglnMutex.Lock()
	fake.debuglnArgsForCall = append(fake.debuglnArgsForCall, struct {
		args []interface{}
	}{args})
	fake.recordInvocation("Debugln", []interface{}{args})
	fake.debuglnMutex.Unlock()
	if fake.DebuglnStub != nil {
		fake.DebuglnStub(args...)
	}
}

func (fake *FakeFieldLogger) DebuglnCallCount() int {
	fake.debuglnMutex.RLock()
	defer fake.debuglnMutex.RUnlock()
	return len(fake.debuglnArgsForCall)
}

func (fake *FakeFieldLogger) DebuglnArgsForCall(i int) []interface{} {
	fake.debuglnMutex.RLock()
	defer fake.debuglnMutex.RUnlock()
	return fake.debuglnArgsForCall[i].args
}

func (fake *FakeFieldLogger) Infoln(args ...interface{}) {
	fake.infolnMutex.Lock()
	fake.infolnArgsForCall = append(fake.infolnArgsForCall, struct {
		args []interface{}
	}{args})
	fake.recordInvocation("Infoln", []interface{}{args})
	fake.infolnMutex.Unlock()
	if fake.InfolnStub != nil {
		fake.InfolnStub(args...)
	}
}

func (fake *FakeFieldLogger) InfolnCallCount() int {
	fake.infolnMutex.RLock()
	defer fake.infolnMutex.RUnlock()
	return len(fake.infolnArgsForCall)
}

func (fake *FakeFieldLogger) InfolnArgsForCall(i int) []interface{} {
	fake.infolnMutex.RLock()
	defer fake.infolnMutex.RUnlock()
	return fake.infolnArgsForCall[i].args
}

func (fake *FakeFieldLogger) Println(args ...interface{}) {
	fake.printlnMutex.Lock()
	fake.printlnArgsForCall = append(fake.printlnArgsForCall, struct {
		args []interface{}
	}{args})
	fake.recordInvocation("Println", []interface{}{args})
	fake.printlnMutex.Unlock()
	if fake.PrintlnStub != nil {
		fake.PrintlnStub(args...)
	}
}

func (fake *FakeFieldLogger) PrintlnCallCount() int {
	fake.printlnMutex.RLock()
	defer fake.printlnMutex.RUnlock()
	return len(fake.printlnArgsForCall)
}

func (fake *FakeFieldLogger) PrintlnArgsForCall(i int) []interface{} {
	fake.printlnMutex.RLock()
	defer fake.printlnMutex.RUnlock()
	return fake.printlnArgsForCall[i].args
}

func (fake *FakeFieldLogger) Warnln(args ...interface{}) {
	fake.warnlnMutex.Lock()
	fake.warnlnArgsForCall = append(fake.warnlnArgsForCall, struct {
		args []interface{}
	}{args})
	fake.recordInvocation("Warnln", []interface{}{args})
	fake.warnlnMutex.Unlock()
	if fake.WarnlnStub != nil {
		fake.WarnlnStub(args...)
	}
}

func (fake *FakeFieldLogger) WarnlnCallCount() int {
	fake.warnlnMutex.RLock()
	defer fake.warnlnMutex.RUnlock()
	return len(fake.warnlnArgsForCall)
}

func (fake *FakeFieldLogger) WarnlnArgsForCall(i int) []interface{} {
	fake.warnlnMutex.RLock()
	defer fake.warnlnMutex.RUnlock()
	return fake.warnlnArgsForCall[i].args
}

func (fake *FakeFieldLogger) Warningln(args ...interface{}) {
	fake.warninglnMutex.Lock()
	fake.warninglnArgsForCall = append(fake.warninglnArgsForCall, struct {
		args []interface{}
	}{args})
	fake.recordInvocation("Warningln", []interface{}{args})
	fake.warninglnMutex.Unlock()
	if fake.WarninglnStub != nil {
		fake.WarninglnStub(args...)
	}
}

func (fake *FakeFieldLogger) WarninglnCallCount() int {
	fake.warninglnMutex.RLock()
	defer fake.warninglnMutex.RUnlock()
	return len(fake.warninglnArgsForCall)
}

func (fake *FakeFieldLogger) WarninglnArgsForCall(i int) []interface{} {
	fake.warninglnMutex.RLock()
	defer fake.warninglnMutex.RUnlock()
	return fake.warninglnArgsForCall[i].args
}

func (fake *FakeFieldLogger) Errorln(args ...interface{}) {
	fake.errorlnMutex.Lock()
	fake.errorlnArgsForCall = append(fake.errorlnArgsForCall, struct {
		args []interface{}
	}{args})
	fake.recordInvocation("Errorln", []interface{}{args})
	fake.errorlnMutex.Unlock()
	if fake.ErrorlnStub != nil {
		fake.ErrorlnStub(args...)
	}
}

func (fake *FakeFieldLogger) ErrorlnCallCount() int {
	fake.errorlnMutex.RLock()
	defer fake.errorlnMutex.RUnlock()
	return len(fake.errorlnArgsForCall)
}

func (fake *FakeFieldLogger) ErrorlnArgsForCall(i int) []interface{} {
	fake.errorlnMutex.RLock()
	defer fake.errorlnMutex.RUnlock()
	return fake.errorlnArgsForCall[i].args
}

func (fake *FakeFieldLogger) Fatalln(args ...interface{}) {
	fake.fatallnMutex.Lock()
	fake.fatallnArgsForCall = append(fake.fatallnArgsForCall, struct {
		args []interface{}
	}{args})
	fake.recordInvocation("Fatalln", []interface{}{args})
	fake.fatallnMutex.Unlock()
	if fake.FatallnStub != nil {
		fake.FatallnStub(args...)
	}
}

func (fake *FakeFieldLogger) FatallnCallCount() int {
	fake.fatallnMutex.RLock()
	defer fake.fatallnMutex.RUnlock()
	return len(fake.fatallnArgsForCall)
}

func (fake *FakeFieldLogger) FatallnArgsForCall(i int) []interface{} {
	fake.fatallnMutex.RLock()
	defer fake.fatallnMutex.RUnlock()
	return fake.fatallnArgsForCall[i].args
}

func (fake *FakeFieldLogger) Panicln(args ...interface{}) {
	fake.paniclnMutex.Lock()
	fake.paniclnArgsForCall = append(fake.paniclnArgsForCall, struct {
		args []interface{}
	}{args})
	fake.recordInvocation("Panicln", []interface{}{args})
	fake.paniclnMutex.Unlock()
	if fake.PaniclnStub != nil {
		fake.PaniclnStub(args...)
	}
}

func (fake *FakeFieldLogger) PaniclnCallCount() int {
	fake.paniclnMutex.RLock()
	defer fake.paniclnMutex.RUnlock()
	return len(fake.paniclnArgsForCall)
}

func (fake *FakeFieldLogger) PaniclnArgsForCall(i int) []interface{} {
	fake.paniclnMutex.RLock()
	defer fake.paniclnMutex.RUnlock()
	return fake.paniclnArgsForCall[i].args
}

func (fake *FakeFieldLogger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.withFieldMutex.RLock()
	defer fake.withFieldMutex.RUnlock()
	fake.withFieldsMutex.RLock()
	defer fake.withFieldsMutex.RUnlock()
	fake.withErrorMutex.RLock()
	defer fake.withErrorMutex.RUnlock()
	fake.debugfMutex.RLock()
	defer fake.debugfMutex.RUnlock()
	fake.infofMutex.RLock()
	defer fake.infofMutex.RUnlock()
	fake.printfMutex.RLock()
	defer fake.printfMutex.RUnlock()
	fake.warnfMutex.RLock()
	defer fake.warnfMutex.RUnlock()
	fake.warningfMutex.RLock()
	defer fake.warningfMutex.RUnlock()
	fake.errorfMutex.RLock()
	defer fake.errorfMutex.RUnlock()
	fake.fatalfMutex.RLock()
	defer fake.fatalfMutex.RUnlock()
	fake.panicfMutex.RLock()
	defer fake.panicfMutex.RUnlock()
	fake.debugMutex.RLock()
	defer fake.debugMutex.RUnlock()
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	fake.printMutex.RLock()
	defer fake.printMutex.RUnlock()
	fake.warnMutex.RLock()
	defer fake.warnMutex.RUnlock()
	fake.warningMutex.RLock()
	defer fake.warningMutex.RUnlock()
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	fake.fatalMutex.RLock()
	defer fake.fatalMutex.RUnlock()
	fake.panicMutex.RLock()
	defer fake.panicMutex.RUnlock()
	fake.debuglnMutex.RLock()
	defer fake.debuglnMutex.RUnlock()
	fake.infolnMutex.RLock()
	defer fake.infolnMutex.RUnlock()
	fake.printlnMutex.RLock()
	defer fake.printlnMutex.RUnlock()
	fake.warnlnMutex.RLock()
	defer fake.warnlnMutex.RUnlock()
	fake.warninglnMutex.RLock()
	defer fake.warninglnMutex.RUnlock()
	fake.errorlnMutex.RLock()
	defer fake.errorlnMutex.RUnlock()
	fake.fatallnMutex.RLock()
	defer fake.fatallnMutex.RUnlock()
	fake.paniclnMutex.RLock()
	defer fake.paniclnMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFieldLogger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ logrus.FieldLogger = new(FakeFieldLogger)

// This file was generated by counterfeiter
package dalfakes

import (
	"sync"

	"github.com/9corp/9volt/dal"
	"github.com/coreos/etcd/client"
)

type FakeIDal struct {
	GetStub        func(string, bool) (map[string]string, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	getReturns struct {
		result1 map[string]string
		result2 error
	}
	SetStub        func(string, string, bool, int, string) error
	setMutex       sync.RWMutex
	setArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 bool
		arg4 int
		arg5 string
	}
	setReturns struct {
		result1 error
	}
	DeleteStub        func(string, bool) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	deleteReturns struct {
		result1 error
	}
	RefreshStub        func(string, int) error
	refreshMutex       sync.RWMutex
	refreshArgsForCall []struct {
		arg1 string
		arg2 int
	}
	refreshReturns struct {
		result1 error
	}
	KeyExistsStub        func(string) (bool, bool, error)
	keyExistsMutex       sync.RWMutex
	keyExistsArgsForCall []struct {
		arg1 string
	}
	keyExistsReturns struct {
		result1 bool
		result2 bool
		result3 error
	}
	IsKeyNotFoundStub        func(error) bool
	isKeyNotFoundMutex       sync.RWMutex
	isKeyNotFoundArgsForCall []struct {
		arg1 error
	}
	isKeyNotFoundReturns struct {
		result1 bool
	}
	CreateDirectorStateStub        func(string) error
	createDirectorStateMutex       sync.RWMutex
	createDirectorStateArgsForCall []struct {
		arg1 string
	}
	createDirectorStateReturns struct {
		result1 error
	}
	UpdateDirectorStateStub        func(string, string, bool) error
	updateDirectorStateMutex       sync.RWMutex
	updateDirectorStateArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 bool
	}
	updateDirectorStateReturns struct {
		result1 error
	}
	NewWatcherStub        func(string, bool) client.Watcher
	newWatcherMutex       sync.RWMutex
	newWatcherArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	newWatcherReturns struct {
		result1 client.Watcher
	}
	GetClusterMembersStub        func() ([]string, error)
	getClusterMembersMutex       sync.RWMutex
	getClusterMembersArgsForCall []struct{}
	getClusterMembersReturns     struct {
		result1 []string
		result2 error
	}
	GetCheckKeysStub        func() ([]string, error)
	getCheckKeysMutex       sync.RWMutex
	getCheckKeysArgsForCall []struct{}
	getCheckKeysReturns     struct {
		result1 []string
		result2 error
	}
	invocations map[string][][]interface{}
}

func (fake *FakeIDal) Get(arg1 string, arg2 bool) (map[string]string, error) {
	fake.getMutex.Lock()
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	fake.guard("Get")
	fake.invocations["Get"] = append(fake.invocations["Get"], []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1, arg2)
	} else {
		return fake.getReturns.result1, fake.getReturns.result2
	}
}

func (fake *FakeIDal) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeIDal) GetArgsForCall(i int) (string, bool) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].arg1, fake.getArgsForCall[i].arg2
}

func (fake *FakeIDal) GetReturns(result1 map[string]string, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeIDal) Set(arg1 string, arg2 string, arg3 bool, arg4 int, arg5 string) error {
	fake.setMutex.Lock()
	fake.setArgsForCall = append(fake.setArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 bool
		arg4 int
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	fake.guard("Set")
	fake.invocations["Set"] = append(fake.invocations["Set"], []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.setMutex.Unlock()
	if fake.SetStub != nil {
		return fake.SetStub(arg1, arg2, arg3, arg4, arg5)
	} else {
		return fake.setReturns.result1
	}
}

func (fake *FakeIDal) SetCallCount() int {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return len(fake.setArgsForCall)
}

func (fake *FakeIDal) SetArgsForCall(i int) (string, string, bool, int, string) {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return fake.setArgsForCall[i].arg1, fake.setArgsForCall[i].arg2, fake.setArgsForCall[i].arg3, fake.setArgsForCall[i].arg4, fake.setArgsForCall[i].arg5
}

func (fake *FakeIDal) SetReturns(result1 error) {
	fake.SetStub = nil
	fake.setReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIDal) Delete(arg1 string, arg2 bool) error {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	fake.guard("Delete")
	fake.invocations["Delete"] = append(fake.invocations["Delete"], []interface{}{arg1, arg2})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(arg1, arg2)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeIDal) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeIDal) DeleteArgsForCall(i int) (string, bool) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].arg1, fake.deleteArgsForCall[i].arg2
}

func (fake *FakeIDal) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIDal) Refresh(arg1 string, arg2 int) error {
	fake.refreshMutex.Lock()
	fake.refreshArgsForCall = append(fake.refreshArgsForCall, struct {
		arg1 string
		arg2 int
	}{arg1, arg2})
	fake.guard("Refresh")
	fake.invocations["Refresh"] = append(fake.invocations["Refresh"], []interface{}{arg1, arg2})
	fake.refreshMutex.Unlock()
	if fake.RefreshStub != nil {
		return fake.RefreshStub(arg1, arg2)
	} else {
		return fake.refreshReturns.result1
	}
}

func (fake *FakeIDal) RefreshCallCount() int {
	fake.refreshMutex.RLock()
	defer fake.refreshMutex.RUnlock()
	return len(fake.refreshArgsForCall)
}

func (fake *FakeIDal) RefreshArgsForCall(i int) (string, int) {
	fake.refreshMutex.RLock()
	defer fake.refreshMutex.RUnlock()
	return fake.refreshArgsForCall[i].arg1, fake.refreshArgsForCall[i].arg2
}

func (fake *FakeIDal) RefreshReturns(result1 error) {
	fake.RefreshStub = nil
	fake.refreshReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIDal) KeyExists(arg1 string) (bool, bool, error) {
	fake.keyExistsMutex.Lock()
	fake.keyExistsArgsForCall = append(fake.keyExistsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.guard("KeyExists")
	fake.invocations["KeyExists"] = append(fake.invocations["KeyExists"], []interface{}{arg1})
	fake.keyExistsMutex.Unlock()
	if fake.KeyExistsStub != nil {
		return fake.KeyExistsStub(arg1)
	} else {
		return fake.keyExistsReturns.result1, fake.keyExistsReturns.result2, fake.keyExistsReturns.result3
	}
}

func (fake *FakeIDal) KeyExistsCallCount() int {
	fake.keyExistsMutex.RLock()
	defer fake.keyExistsMutex.RUnlock()
	return len(fake.keyExistsArgsForCall)
}

func (fake *FakeIDal) KeyExistsArgsForCall(i int) string {
	fake.keyExistsMutex.RLock()
	defer fake.keyExistsMutex.RUnlock()
	return fake.keyExistsArgsForCall[i].arg1
}

func (fake *FakeIDal) KeyExistsReturns(result1 bool, result2 bool, result3 error) {
	fake.KeyExistsStub = nil
	fake.keyExistsReturns = struct {
		result1 bool
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeIDal) IsKeyNotFound(arg1 error) bool {
	fake.isKeyNotFoundMutex.Lock()
	fake.isKeyNotFoundArgsForCall = append(fake.isKeyNotFoundArgsForCall, struct {
		arg1 error
	}{arg1})
	fake.guard("IsKeyNotFound")
	fake.invocations["IsKeyNotFound"] = append(fake.invocations["IsKeyNotFound"], []interface{}{arg1})
	fake.isKeyNotFoundMutex.Unlock()
	if fake.IsKeyNotFoundStub != nil {
		return fake.IsKeyNotFoundStub(arg1)
	} else {
		return fake.isKeyNotFoundReturns.result1
	}
}

func (fake *FakeIDal) IsKeyNotFoundCallCount() int {
	fake.isKeyNotFoundMutex.RLock()
	defer fake.isKeyNotFoundMutex.RUnlock()
	return len(fake.isKeyNotFoundArgsForCall)
}

func (fake *FakeIDal) IsKeyNotFoundArgsForCall(i int) error {
	fake.isKeyNotFoundMutex.RLock()
	defer fake.isKeyNotFoundMutex.RUnlock()
	return fake.isKeyNotFoundArgsForCall[i].arg1
}

func (fake *FakeIDal) IsKeyNotFoundReturns(result1 bool) {
	fake.IsKeyNotFoundStub = nil
	fake.isKeyNotFoundReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIDal) CreateDirectorState(arg1 string) error {
	fake.createDirectorStateMutex.Lock()
	fake.createDirectorStateArgsForCall = append(fake.createDirectorStateArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.guard("CreateDirectorState")
	fake.invocations["CreateDirectorState"] = append(fake.invocations["CreateDirectorState"], []interface{}{arg1})
	fake.createDirectorStateMutex.Unlock()
	if fake.CreateDirectorStateStub != nil {
		return fake.CreateDirectorStateStub(arg1)
	} else {
		return fake.createDirectorStateReturns.result1
	}
}

func (fake *FakeIDal) CreateDirectorStateCallCount() int {
	fake.createDirectorStateMutex.RLock()
	defer fake.createDirectorStateMutex.RUnlock()
	return len(fake.createDirectorStateArgsForCall)
}

func (fake *FakeIDal) CreateDirectorStateArgsForCall(i int) string {
	fake.createDirectorStateMutex.RLock()
	defer fake.createDirectorStateMutex.RUnlock()
	return fake.createDirectorStateArgsForCall[i].arg1
}

func (fake *FakeIDal) CreateDirectorStateReturns(result1 error) {
	fake.CreateDirectorStateStub = nil
	fake.createDirectorStateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIDal) UpdateDirectorState(arg1 string, arg2 string, arg3 bool) error {
	fake.updateDirectorStateMutex.Lock()
	fake.updateDirectorStateArgsForCall = append(fake.updateDirectorStateArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 bool
	}{arg1, arg2, arg3})
	fake.guard("UpdateDirectorState")
	fake.invocations["UpdateDirectorState"] = append(fake.invocations["UpdateDirectorState"], []interface{}{arg1, arg2, arg3})
	fake.updateDirectorStateMutex.Unlock()
	if fake.UpdateDirectorStateStub != nil {
		return fake.UpdateDirectorStateStub(arg1, arg2, arg3)
	} else {
		return fake.updateDirectorStateReturns.result1
	}
}

func (fake *FakeIDal) UpdateDirectorStateCallCount() int {
	fake.updateDirectorStateMutex.RLock()
	defer fake.updateDirectorStateMutex.RUnlock()
	return len(fake.updateDirectorStateArgsForCall)
}

func (fake *FakeIDal) UpdateDirectorStateArgsForCall(i int) (string, string, bool) {
	fake.updateDirectorStateMutex.RLock()
	defer fake.updateDirectorStateMutex.RUnlock()
	return fake.updateDirectorStateArgsForCall[i].arg1, fake.updateDirectorStateArgsForCall[i].arg2, fake.updateDirectorStateArgsForCall[i].arg3
}

func (fake *FakeIDal) UpdateDirectorStateReturns(result1 error) {
	fake.UpdateDirectorStateStub = nil
	fake.updateDirectorStateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIDal) NewWatcher(arg1 string, arg2 bool) client.Watcher {
	fake.newWatcherMutex.Lock()
	fake.newWatcherArgsForCall = append(fake.newWatcherArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	fake.guard("NewWatcher")
	fake.invocations["NewWatcher"] = append(fake.invocations["NewWatcher"], []interface{}{arg1, arg2})
	fake.newWatcherMutex.Unlock()
	if fake.NewWatcherStub != nil {
		return fake.NewWatcherStub(arg1, arg2)
	} else {
		return fake.newWatcherReturns.result1
	}
}

func (fake *FakeIDal) NewWatcherCallCount() int {
	fake.newWatcherMutex.RLock()
	defer fake.newWatcherMutex.RUnlock()
	return len(fake.newWatcherArgsForCall)
}

func (fake *FakeIDal) NewWatcherArgsForCall(i int) (string, bool) {
	fake.newWatcherMutex.RLock()
	defer fake.newWatcherMutex.RUnlock()
	return fake.newWatcherArgsForCall[i].arg1, fake.newWatcherArgsForCall[i].arg2
}

func (fake *FakeIDal) NewWatcherReturns(result1 client.Watcher) {
	fake.NewWatcherStub = nil
	fake.newWatcherReturns = struct {
		result1 client.Watcher
	}{result1}
}

func (fake *FakeIDal) GetClusterMembers() ([]string, error) {
	fake.getClusterMembersMutex.Lock()
	fake.getClusterMembersArgsForCall = append(fake.getClusterMembersArgsForCall, struct{}{})
	fake.guard("GetClusterMembers")
	fake.invocations["GetClusterMembers"] = append(fake.invocations["GetClusterMembers"], []interface{}{})
	fake.getClusterMembersMutex.Unlock()
	if fake.GetClusterMembersStub != nil {
		return fake.GetClusterMembersStub()
	} else {
		return fake.getClusterMembersReturns.result1, fake.getClusterMembersReturns.result2
	}
}

func (fake *FakeIDal) GetClusterMembersCallCount() int {
	fake.getClusterMembersMutex.RLock()
	defer fake.getClusterMembersMutex.RUnlock()
	return len(fake.getClusterMembersArgsForCall)
}

func (fake *FakeIDal) GetClusterMembersReturns(result1 []string, result2 error) {
	fake.GetClusterMembersStub = nil
	fake.getClusterMembersReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeIDal) GetCheckKeys() ([]string, error) {
	fake.getCheckKeysMutex.Lock()
	fake.getCheckKeysArgsForCall = append(fake.getCheckKeysArgsForCall, struct{}{})
	fake.guard("GetCheckKeys")
	fake.invocations["GetCheckKeys"] = append(fake.invocations["GetCheckKeys"], []interface{}{})
	fake.getCheckKeysMutex.Unlock()
	if fake.GetCheckKeysStub != nil {
		return fake.GetCheckKeysStub()
	} else {
		return fake.getCheckKeysReturns.result1, fake.getCheckKeysReturns.result2
	}
}

func (fake *FakeIDal) GetCheckKeysCallCount() int {
	fake.getCheckKeysMutex.RLock()
	defer fake.getCheckKeysMutex.RUnlock()
	return len(fake.getCheckKeysArgsForCall)
}

func (fake *FakeIDal) GetCheckKeysReturns(result1 []string, result2 error) {
	fake.GetCheckKeysStub = nil
	fake.getCheckKeysReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeIDal) Invocations() map[string][][]interface{} {
	return fake.invocations
}

func (fake *FakeIDal) guard(key string) {
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
}

var _ dal.IDal = new(FakeIDal)
